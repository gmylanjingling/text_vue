1.Msite的页面（第一屏）
 swiper是第三方插件，下载后直接引入即可    node_modules ---> swiper--->dist--->css-->swipter
   swiper没有显示，因为没有引入swiper---->下载--》引入
   import Swiper from 'swiper'
     import 'swiper/dist/css/swiper.min.css'
    new Swiper('.swiper-container', {
           loop: true,  // 循环轮播
           // 如果需要分页器
           pagination: {
             el: '.swiper-pagination',
           }
         })
    在页面渲染完以后，设置轮播
2.把Order;Profile和Search;Msite组件html内容及stylus样式加入以后
  以上四个组件头部导航样式相同,可以设置一个组件HeadTop组件，把共同的样式抽取出来(为静态组件，放入components中
  使用slot进行组件间的通信------》标签传递
  HeadTop组件为通用的,放在全局里注册（在main.js注册） 引入--->注册 Vue.component('HeadTop',HeadTop);


操作：一、测试:1)分析组件，先设文件夹;
            2)先设几个普通的文字，如App实现页面的初步显示;
            3)设置底部导航-->路由组件，引入样式，实现初步页面跳转;
              a)设置路由对象(路由组件)--》{所有组件都在这里设置}-->注册路由-》配置路由器(在main.js中);
    二、第一屏:
         轮播图：下载第三方插件swiper-->引入-->创建对象（引入配置对象）-->可查看文档
              注意:轮播图的轮播显示要放在mounted中，此时页面渲染完成
         头部必须抽取出来 ---》头部导航HeadTop通用组件的设置,在多处使用,
             放在全局里注册（在main.js注册） 引入--->注册 Vue.component('HeadTop',HeadTop);

         使用slot进行组件间的通信------》标签传递
            为子组件:基本构造--》无需涵盖过多内容，仅变化的内容需要写入，如title
             使用此组件的
          为其父组件,与子组件进行通信,内容在此处解析，解析后传递给子组件

    Msite组件的商家列表可以抽取出来，也可以不抽取出来
        其为本页面单独使用，不是路由组件，为普通组件
        ShopList.vue为组件Msite组件的子组件,设置好内容以后要
        引入父组件中：模板中写入组件;script中引入;new Vue中映射组件
三、第四屏
    点击登录注册后跳转，跳转至Lodin组件（为路由组件）
    有两种方法跳转：1是route-link;另一种是编程式路由导航js
    法一:只需在点击内容外侧包裹<router-link to = "/login"></router-link>即可
    法二:
Login组件（路由组件）---->配置，注册--->html文件书写--->静态功能实现
四、底部导航区在四大组件时显示,转换至其他组件时隐藏
    查看路由文档:路由元信息
   查看vue工具,meta:{requireAuth:true};
   配置路由时可以配置meta，指定标识属性（标识底部导航）,来确定需不需要此属性,值的类型为对象；


 五、与后台交互  ajax
 把硅谷外卖的项目api文件里内容拉进postman里,可以查看集合
 postman 可以测试接口--》发送是否成功
 启动服务器
   发送ajax请求
   1.下载axios的依赖
     封装ajax请求函数
   2.index.js 含有n个请求函数
   3.测试ajax请求，在App中进行
 六、发送ajax请求，引入Vuex
   store(-->index.js)核心库管理：有四个部分+mutation-types
    actions;state;mutations;getters
七、title动态切换
八、列表的请求（商品列表和商家列表）
   ajax请求(分发dispatch)<mounted>-->state---》
九、商品列表的更新,数据状态的改变
 1) 有底背景:底背景在图片列表显示前显示，列表显示后消失
    问题1：在哪里控制他们的出现
 2)图片的显示，图片列表是数组，两个列表:二维数组 ;
    发送请求得到16张图片(在一个数组中)
    a.遍历列表得到内部数组;
    b.遍历数组得到每一个数据;
  获取图片--->显示图片--->图片为请求得到的(涵盖在商品列表中，同过属性可得到;地址前缀是在提供的路径中获取的)
  图片的文字  title的获取同图片
3）以上过程未出现滑动,且 没有底部小圆点呈现
swiper必须在列表显示后才能使用;

解决方法：a.可以用setTimeout延时,但其不稳定，不可用;
        b.监视某个属性的变化，用watch（update是监视所有属性的变化）--->这里监视商品列表
  注意:状态变化后，界面才异步执行更新;监听的watch回调是同步执行的,
       要将回调延迟，下次DOM更新循环后执行,在修改后立即使用它
       引入
       this.$nextTick(()=>{
       })
   发送ajax请求--->state--->组件更新(三部分)
十、商家列表的更新
   发送ajax请求--->state--->组件更新
   分发--》计算属性--》模板
    注意mounted是一个函数
    mapState([])apState是函数，辅助我们生成计算属性;正常时是this.$store.state
仅留一个li样式设置动态数据
    评分的变化
 星星:有两个组件使用，Star组件
     是本地获取的一般组件
     引入--》注册--》使用(传属性)
     不需要发送请求即可获取相关数据


登录与注册部分：

一、前台交互效果
   a.切换登录方式
   密码登录与短信登录
   (动态切换类名-->动态（对象语法：已经确定，不知道有没有）,界面有变化,状态变化,设置状态)
   两种状态：类名的切换
   b.手机号验证
    左侧输入，右侧数字变黑色
    class类名切换（可能有或没有）对象
   c.倒计时效果
     初始0;
     定时器; /*1)无需开启定时器:a.未输入正确手机号;b.正在计时
                 * 2)负值*/
     button disabled="disabled" //按钮被禁止 -->可在标签中写，也可写在js中
      可以动态显示
   d.密码显示,隐藏与切换
 二、前后台交互效果
    1)一次性图形的验证码
    后台返回是图片 ，保存的是文本
    显示验证图片不用发送ajax请求
    src指向后台一个地址，无ajax请求，不存在跨域问题
    a.点击验证码，更新--》加监听
    b.改变this指向
    2)发送一次性短信验证码

    3)短信登录
    4)密码登录
    5)退出登录




小结:ajax函数的封装;
    接口文件的设置:含有n个接口请求函数;
    form 里任何按钮点击会提交，需要阻止默认事件
  e.密码显示/隐藏切换
    左侧密码是否显示;按钮切换
    右侧按钮:颜色和文本
    小球的移动：在有right属性的时候，移到右边




